{"version":3,"sources":["views/Questions/Sections/Q6.jsx","views/Questions/PictureWall.jsx","views/Questions/QuestionsAPI.jsx"],"names":["renameFile","file","date","Date","now","console","log","newName","name","File","type","lastModified","Q6","props","handleChange","ev","setState","fileImgs","state","URL","createObjectURL","target","files","fileArr","uploadMessage","error","handleUpload","a","fileToAddDB","fileParts","split","fileName","fileType","jwt","localStorage","getItem","config","headers","Authorization","axios","post","REMOTE_HOST","bucket","response","returnData","data","signedRequest","url","options","put","success","memoryName","imgID","JSON","stringify","Error","document","getElementById","value","navButton","borderRadius","margin","width","images","this","map","image","key","src","style","height","objectFit","textAlign","className","fontSize","marginBottom","onChange","ref","uploadInput","multiple","id","display","justifyContent","onClick","marginTop","prev","next","React","Component","getBase64","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","PicturesWall","previewVisible","previewImage","previewTitle","fileList","uid","status","handleCancel","handlePreview","preview","originFileObj","substring","lastIndexOf","uploadButton","action","listType","onPreview","length","visible","title","footer","onCancel","alt","$","require","uploadMedia","saveStripeToken","token_id","payee_email","formData","FormData","append","dfd","Deferred","ajax","contentType","cache","processData","done","fail","jqXHR","textStatus","errorThrown","promise"],"mappings":"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","file":"static/js/131.58586217.chunk.js","sourcesContent":["import React from \"react\";\nimport {Button, Upload, notification} from \"antd\";\nimport InboxOutlined from \"@ant-design/icons/lib/icons/InboxOutlined\";\nimport {uploadMedia} from \"../QuestionsAPI\";\nimport axios from \"axios\";\nimport PictureWall from \"../PictureWall\"\nimport { json } from \"body-parser\";\nimport { REMOTE_HOST } from \"../../../constants.js\"\nimport \"../Questions.css\"\n\nfunction renameFile(file) {\n    var date = Date.now()\n    console.log(\"date: \" + date)\n\n    var newName = date + \"_\" + file.name\n    return new File([file], newName, {\n        type: file.type,\n        lastModified: file.lastModified,\n    });\n}\n\nexport default class Q6 extends React.Component {\n    //fileImgs is the array of photo urls which are used to diaply the thumbnail\n    //fileArr is used for the actual photos to be dumped into s3 bucket\n    constructor(props){\n        super(props);\n        this.state = {\n          success : false,\n          url : \"\",\n          fileName: \"\",\n          fileImgs: [],\n          fileArr: [],\n          uploadMessage: \"\"\n            \n        }\n    }\n    \n\n    handleChange = (ev) => {\n        try{\n            this.setState({ fileImgs: [...this.state.fileImgs, URL.createObjectURL(ev.target.files[0])], fileArr: [...this.state.fileArr, ev.target.files[0]], uploadMessage: \"\" })\n        } catch(error) {\n            this.setState({ fileImgs: [], fileArr: [], uploadMessage: \"An error occured while uploading your photos. Please try again.\" })\n        }\n        \n    }\n    \n\n    handleUpload = async(ev) => {\n        this.setState({ uploadMessage: `Please wait for your images to finish uploading before proceeding to the next step. \n        \n        We will notify you when the upload is complete, thank you for your patience!` })\n        const files = this.state.fileArr;\n        console.log(files);\n\n\n        for(file of files) {\n            var file = renameFile(file)\n\n            var fileToAddDB = \"\"\n    \n            console.log(\"new file\")\n            console.log(file)\n            // Split the filename to get the name and type\n            let fileParts = file.name.split('.');\n            let fileName = fileParts[0];\n            let fileType = fileParts[1];\n            \n            console.log(\"Preparing the upload\");\n    \n            const jwt = localStorage.getItem(\"token\");\n            const config = {\n                headers: {\n                    Authorization: `Bearer ${jwt}`,\n                }\n            }\n\n            //--------------------------------------------//\n            try {\n                let response = await axios.post(REMOTE_HOST + \"/aws/signS3_upload\", {\n                    bucket: \"resteasy-user-uploads\",\n                    fileName: fileName,\n                    fileType: fileType\n                }, config)\n\n                var returnData = response.data\n                var signedRequest = returnData.signedRequest;\n                var url = returnData.url;\n                this.setState({ url: url })\n                fileToAddDB = returnData.fileName\n                console.log(\"Recieved a signed request \" + signedRequest);\n                console.log(fileToAddDB)\n\n                // Put the fileType in the headers for the upload\n                var options = {\n                    headers: {\n                        'Content-Type': fileType\n                    }\n                };\n\n                try {\n                    let result = await axios.put(signedRequest, file, options)\n                    this.setState({ success: true });\n\n                    // upon successful upload, add the file data into the userImages index in mongoDB\n                    console.log(\"add to database: \" + fileToAddDB)\n                    try {\n                        let addResult = await axios.post(REMOTE_HOST + \"/aws/addImgDB\", {\n                            memoryName: \"testMemory\",\n                            imgID: fileToAddDB\n                        }, config)\n                        \n                    } catch(error) {\n                        console.log(\"error \" + JSON.stringify(error))\n                        throw new Error(error)\n                    }\n\n                } catch(error) {\n                    console.log(\"ERROR \" + JSON.stringify(error));\n                    throw new Error(error)\n\n                }\n\n\n            } catch (error) {\n                console.log(JSON.stringify(error.response));\n                throw new Error(error)\n\n            }\n\n        }\n        document.getElementById(\"choose-file\").value = null;\n        this.setState({ fileImgs: [], fileArr: [], uploadMessage: \"Image(s) uploaded! You can add more or go to the next step.\" })\n\n    };\n\n\n    render() {\n\n        const navButton = {\n            borderRadius: \"10px\",\n            margin: \"10px\",\n            width: \"100px\"\n        }\n\n        let imgArr = this.state.fileImgs\n        const images = imgArr.map(image => {\n            return <img key={image} src={image} style={{height: \"60px\", width: \"60px\", objectFit: \"cover\", margin: \"10px\"}} />\n         });\n\n        return (\n            <div style={{width: \"100%\", textAlign: \"center\"}}>\n                <div className=\"create-text\" style={{fontSize: \"1.5em\", marginBottom: \"0.5em\"}}>\n                    Share some of your favourite memories\n                </div>\n\n                <input onChange={this.handleChange} ref={(ref) => { this.uploadInput = ref; }} type=\"file\" multiple={false} id=\"choose-file\" style={{marginBottom: \"20px\"}}/>\n                <br/>\n                { this.state.uploadMessage }\n                <div style={{display: \"flex\", justifyContent: \"center\"}}>\n                    <br />\n                    { images }\n                </div>\n                <br />\n                <br />\n                <button className=\"upload\" onClick={this.handleUpload}>UPLOAD PHOTO(S)</button>\n                <br/>\n                <div style={{display: \"flex\", justifyContent: \"center\", marginTop: \"1em\"}}>\n                    <Button type=\"primary\" onClick={this.props.prev} style={navButton}>Previous</Button>\n                    <Button type=\"primary\" onClick={this.props.next} style={navButton}>Skip/Next</Button>\n                </div>\n            </div>);\n    }\n}\n","import React from \"react\"\nimport { Upload, Modal } from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\n\nfunction getBase64(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = error => reject(error);\n  });\n}\n\nexport default class PicturesWall extends React.Component {\n  state = {\n    previewVisible: false,\n    previewImage: '',\n    previewTitle: '',\n    fileList: [\n      {\n        uid: '-1',\n        name: 'image.png',\n        status: 'done',\n        url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\n      },\n      {\n        uid: '-2',\n        name: 'image.png',\n        status: 'done',\n        url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\n      },\n      {\n        uid: '-3',\n        name: 'image.png',\n        status: 'done',\n        url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\n      },\n      {\n        uid: '-4',\n        name: 'image.png',\n        status: 'done',\n        url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\n      },\n      {\n        uid: '-5',\n        name: 'image.png',\n        status: 'error',\n      },\n    ],\n  };\n\n  handleCancel = () => this.setState({ previewVisible: false });\n\n  handlePreview = async file => {\n    if (!file.url && !file.preview) {\n      file.preview = await getBase64(file.originFileObj);\n    }\n\n    this.setState({\n      previewImage: file.url || file.preview,\n      previewVisible: true,\n      previewTitle: file.name || file.url.substring(file.url.lastIndexOf('/') + 1),\n    });\n  };\n\n  handleChange = ({ fileList }) => {console.log(this.state); this.setState({ fileList })};\n\n  render() {\n    const { previewVisible, previewImage, fileList, previewTitle } = this.state;\n    const uploadButton = (\n      <div>\n        <PlusOutlined />\n        <div className=\"ant-upload-text\">Upload</div>\n      </div>\n    );\n    return (\n      <div className=\"clearfix\">\n        <Upload\n          action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\n          listType=\"picture-card\"\n          fileList={fileList}\n          onPreview={this.handlePreview}\n          onChange={this.handleChange}\n        >\n          {fileList.length >= 8 ? null : uploadButton}\n        </Upload>\n        <Modal\n          visible={previewVisible}\n          title={previewTitle}\n          footer={null}\n          onCancel={this.handleCancel}\n        >\n          <img alt=\"example\" style={{ width: '100%' }} src={previewImage} />\n        </Modal>\n      </div>\n    );\n  }\n}","const $ = require('jquery');\n\nconst uploadMedia = (file) => {\n\n    \n\n    // let formData = new FormData();\n\n    // formData.append('file', file);\n\n    // const url = '/api/uploadMedia/';\n    // const dfd = new $.Deferred();\n\n    // $.ajax({\n    //     url,\n    //     type: 'POST',\n    //     contentType: false,\n    //     data: formData,\n    //     cache: false,\n    //     processData: false,\n    // }).done(function (response) {\n    //     dfd.resolve(response);\n    // }).fail(function(jqXHR, textStatus, errorThrown) {\n    //     dfd.reject(jqXHR);\n    // });\n    // return dfd.promise();\n};\n\nconst saveStripeToken = (token_id, payee_email) => {\n    let formData = new FormData();\n\n    formData.append('token_id', token_id);\n    formData.append('payee_email', payee_email);\n\n    const url = '/api/saveStripeToken/';\n    const dfd = new $.Deferred();\n\n    $.ajax({\n        url,\n        type: 'POST',\n        contentType: false,\n        data: formData,\n        cache: false,\n        processData: false,\n    }).done(function (response) {\n        dfd.resolve(response);\n    }).fail(function(jqXHR, textStatus, errorThrown) {\n        dfd.reject(jqXHR);\n    });\n    return dfd.promise();\n};\n\nexport {\n    uploadMedia,saveStripeToken\n}\n"],"sourceRoot":""}